import java.util.Scanner;

/**
 * Library Management System with abstract LibraryItem class and Reservable interface.
 * Adapts cab service methods: enhanceInvoice (getItemDetails).
 * Demonstrates encapsulation, polymorphism, and guideline #11 (documented behavior).
 */
public class LibraryManagementSystem {
    /**
     * Interface for reservable items.
     */
    interface Reservable {
        void reserveItem(String borrower);
        String checkAvailability();
    }

    /**
     * Abstract LibraryItem class with common fields and methods.
     */
    abstract static class LibraryItem {
        private String itemId;
        private String title;
        private String author;

        public LibraryItem(String itemId, String title, String author) {
            this.itemId = itemId;
            this.title = title;
            this.author = author;
        }

        public abstract int getLoanDuration();

        public String getItemDetails() {
            return "ID: " + itemId + ", Title: " + title + ", Author: " + author + 
                   ", Loan Duration: " + getLoanDuration() + " days";
        }

        // Getters and setters
        public String getItemId() { return itemId; }
        public String getTitle() { return title; }
        public String getAuthor() { return author; }
    }

    /**
     * Book with specific loan duration.
     */
    static class Book extends LibraryItem implements Reservable {
        private String borrower;

        public Book(String itemId, String title, String author) {
            super(itemId, title, author);
            this.borrower = null;
        }

        @Override
        public int getLoanDuration() {
            return 14; // 2 weeks
        }

        @Override
        public void reserveItem(String borrower) {
            this.borrower = borrower;
        }

        @Override
        public String checkAvailability() {
            return "Book " + getTitle() + " is " + (borrower == null ? "available" : "reserved by " + borrower);
        }
    }

    /**
     * Magazine with specific loan duration.
     */
    static class Magazine extends LibraryItem {
        public Magazine(String itemId, String title, String author) {
            super(itemId, title, author);
        }

        @Override
        public int getLoanDuration() {
            return 7; // 1 week
        }
    }

    /**
     * DVD with specific loan duration.
     */
    static class DVD extends LibraryItem implements Reservable {
        private String borrower;

        public DVD(String itemId, String title, String author) {
            super(itemId, title, author);
            this.borrower = null;
        }

        @Override
        public int getLoanDuration() {
            return 3; // 3 days
        }

        @Override
        public void reserveItem(String borrower) {
            this.borrower = borrower;
        }

        @Override
        public String checkAvailability() {
            return "DVD " + getTitle() + " is " + (borrower == null ? "available" : "reserved by " + borrower);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LibraryItem[] items = new LibraryItem[10];
        int itemCount = 0;

        System.out.print("Enter number of items: ");
        int numItems = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < numItems; i++) {
            System.out.print("Enter item ID: ");
            String id = scanner.nextLine();
            System.out.print("Enter title: ");
            String title = scanner.nextLine();
            System.out.print("Enter author: ");
            String author = scanner.nextLine();
            System.out.print("Enter type (Book/Magazine/DVD): ");
            String type = scanner.nextLine();

            LibraryItem item;
            switch (type.toLowerCase()) {
                case "book":
                    item = new Book(id, title, author);
                    break;
                case "magazine":
                    item = new Magazine(id, title, author);
                    break;
                case "dvd":
                    item = new DVD(id, title, author);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid item type");
            }
            items[itemCount++] = item;

            if (item instanceof Reservable) {
                System.out.print("Reserve item? (true/false): ");
                if (scanner.nextBoolean()) {
                    scanner.nextLine();
                    System.out.print("Enter borrower name: ");
                    String borrower = scanner.nextLine();
                    ((Reservable) item).reserveItem(borrower);
                }
            }
            scanner.nextLine();
        }

        // Polymorphic processing
        for (int i = 0; i < itemCount; i++) {
            System.out.println(items[i].getItemDetails());
            if (items[i] instanceof Reservable) {
                System.out.println(((Reservable) items[i]).checkAvailability());
            }
        }

        scanner.close();
    }
}