import java.util.Scanner;

/**
 * Vehicle Rental System with abstract Vehicle class and Insurable interface.
 * Adapts cab service methods: calculateFare (calculateRentalCost).
 * Demonstrates encapsulation, polymorphism, and guideline #5 (final methods where needed).
 */
public class VehicleRentalSystem {
    /**
     * Interface for insurable vehicles.
     */
    interface Insurable {
        double calculateInsurance();
        String getInsuranceDetails();
    }

    /**
     * Abstract Vehicle class with common fields and methods.
     */
    abstract static class Vehicle {
        private String vehicleNumber;
        private String type;
        private double rentalRate;

        public Vehicle(String vehicleNumber, String type, double rentalRate) {
            this.vehicleNumber = vehicleNumber;
            this.type = type;
            this.rentalRate = rentalRate;
        }

        public abstract double calculateRentalCost(int days);

        public final String getVehicleDetails() {
            return "Vehicle: " + vehicleNumber + ", Type: " + type + ", Rental Rate: $" + rentalRate;
        }

        // Getters and setters
        public String getVehicleNumber() { return vehicleNumber; }
        public String getType() { return type; }
        public double getRentalRate() { return rentalRate; }
        public void setRentalRate(double rentalRate) { this.rentalRate = rentalRate; }
    }

    /**
     * Car with specific rental cost and insurance.
     */
    static class Car extends Vehicle implements Insurable {
        public Car(String vehicleNumber, double rentalRate) {
            super(vehicleNumber, "Car", rentalRate);
        }

        @Override
        public double calculateRentalCost(int days) {
            return getRentalRate() * days;
        }

        @Override
        public double calculateInsurance() {
            return getRentalRate() * 0.1; // 10% of rental rate
        }

        @Override
        public String getInsuranceDetails() {
            return "Insurance for " + getVehicleNumber() + ": $" + String.format("%.2f", calculateInsurance());
        }
    }

    /**
     * Bike with specific rental cost.
     */
    static class Bike extends Vehicle {
        public Bike(String vehicleNumber, double rentalRate) {
            super(vehicleNumber, "Bike", rentalRate);
        }

        @Override
        public double calculateRentalCost(int days) {
            return getRentalRate() * days * 0.8; // 20% discount
        }
    }

    /**
     * Truck with specific rental cost and insurance.
     */
    static class Truck extends Vehicle implements Insurable {
        public Truck(String vehicleNumber, double rentalRate) {
            super(vehicleNumber, "Truck", rentalRate);
        }

        @Override
        public double calculateRentalCost(int days) {
            return getRentalRate() * days * 1.2; // 20% premium
        }

        @Override
        public double calculateInsurance() {
            return getRentalRate() * 0.15; // 15% of rental rate
        }

        @Override
        public String getInsuranceDetails() {
            return "Insurance for " + getVehicleNumber() + ": $" + String.format("%.2f", calculateInsurance());
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Vehicle[] vehicles = new Vehicle[10];
        int vehicleCount = 0;

        System.out.print("Enter number of vehicles: ");
        int numVehicles = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < numVehicles; i++) {
            System.out.print("Enter vehicle number: ");
            String number = scanner.nextLine();
            System.out.print("Enter rental rate: ");
            double rate = scanner.nextDouble();
            scanner.nextLine();
            System.out.print("Enter type (Car/Bike/Truck): ");
            String type = scanner.nextLine();
            System.out.print("Enter rental days: ");
            int days = scanner.nextInt();
            scanner.nextLine();

            Vehicle vehicle;
            switch (type.toLowerCase()) {
                case "car":
                    vehicle = new Car(number, rate);
                    break;
                case "bike":
                    vehicle = new Bike(number, rate);
                    break;
                case "truck":
                    vehicle = new Truck(number, rate);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid vehicle type");
            }
            vehicles[vehicleCount++] = vehicle;

            // Polymorphic processing
            System.out.println(vehicle.getVehicleDetails());
            System.out.println("Rental Cost: $" + String.format("%.2f", vehicle.calculateRentalCost(days)));
            if (vehicle instanceof Insurable) {
                System.out.println(((Insurable) vehicle).getInsuranceDetails());
            }
        }

        scanner.close();
    }
}